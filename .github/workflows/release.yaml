name: Release

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
      prerelease:
        description: 'Create a prerelease'
        required: false
        default: false
        type: boolean

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  analyze-commits:
    name: Analyze Commits for Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      should_release: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
      changelog: ${{ steps.semantic.outputs.new_release_notes }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze commits with semantic-release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 23.0.0
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
            conventional-changelog-conventionalcommits@7.0.2
          dry_run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [analyze-commits]
    if: |
      (github.event_name == 'push' && needs.analyze-commits.outputs.should_release == 'true') ||
      github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run tests before release
        env:
          SECRET_KEY: test-secret-key-for-release
        run: |
          mkdir -p configs templates
          uv run python -m pytest -v

      - name: Generate version for manual release
        if: github.event_name == 'workflow_dispatch'
        id: manual_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix if present
          CURRENT_VERSION=${LATEST_TAG#v}
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Bump version based on input
          case "${{ github.event.inputs.version_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          if [ "${{ github.event.inputs.prerelease }}" == "true" ]; then
            NEW_VERSION="$NEW_VERSION-rc.$(date +%Y%m%d%H%M%S)"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create automatic release
        if: github.event_name == 'push'
        id: auto_release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 23.0.0
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
            conventional-changelog-conventionalcommits@7.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manual release
        if: github.event_name == 'workflow_dispatch'
        id: manual_release
        run: |
          VERSION="${{ steps.manual_version.outputs.version }}"
          TAG="${{ steps.manual_version.outputs.tag }}"
          
          # Create and push tag
          git tag -a "$TAG" -m "Release $VERSION"
          git push origin "$TAG"
          
          # Generate changelog since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$TAG^" 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..$TAG" | head -20)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" | head -20)
          fi
          
          # Create GitHub release
          gh release create "$TAG" \
            --title "Release $VERSION" \
            --notes "## Changes
          
          $CHANGELOG
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$TAG" \
            $( [ "${{ github.event.inputs.prerelease }}" == "true" ] && echo "--prerelease" )
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set outputs
        id: release
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "version=${{ steps.auto_release.outputs.new_release_version }}" >> $GITHUB_OUTPUT
            echo "tag=v${{ steps.auto_release.outputs.new_release_version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.manual_version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "tag=${{ steps.manual_version.outputs.tag }}" >> $GITHUB_OUTPUT
          fi

  build-and-publish:
    name: Build and Publish Release Artifacts
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.create-release.outputs.version != ''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: secrets.DOCKER_HUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/domaestro
          tags: |
            type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max
          sbom: true

      - name: Generate release artifacts
        run: |
          mkdir -p release-artifacts
          
          # Create a source archive
          git archive --format=tar.gz --prefix=domaestro-${{ needs.create-release.outputs.version }}/ \
            ${{ needs.create-release.outputs.tag }} > release-artifacts/domaestro-${{ needs.create-release.outputs.version }}.tar.gz
          
          # Create checksums
          cd release-artifacts
          sha256sum *.tar.gz > checksums.txt
          
          # Create build info
          cat > build-info.json << EOF
          {
            "version": "${{ needs.create-release.outputs.version }}",
            "tag": "${{ needs.create-release.outputs.tag }}",
            "commit": "${{ github.sha }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "python_version": "3.13",
            "docker_images": [
              "ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}",
              "${{ secrets.DOCKER_HUB_USERNAME }}/domaestro:${{ needs.create-release.outputs.version }}"
            ]
          }
          EOF

      - name: Upload release artifacts
        run: |
          gh release upload ${{ needs.create-release.outputs.tag }} \
            release-artifacts/* \
            --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan-release:
    name: Security Scan Release Image
    runs-on: ubuntu-latest
    needs: [create-release, build-and-publish]
    if: needs.create-release.outputs.version != ''
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-publish, security-scan-release]
    if: always() && needs.create-release.outputs.version != ''
    
    steps:
      - name: Notify successful release
        if: needs.build-and-publish.result == 'success'
        run: |
          echo "🎉 Release ${{ needs.create-release.outputs.version }} completed successfully!"
          echo "Docker images:"
          echo "- ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}"
          echo "- ${{ secrets.DOCKER_HUB_USERNAME }}/domaestro:${{ needs.create-release.outputs.version }}"
          # Here you could add Slack, Discord, or email notifications

      - name: Notify failed release
        if: needs.build-and-publish.result == 'failure' || needs.security-scan-release.result == 'failure'
        run: |
          echo "❌ Release ${{ needs.create-release.outputs.version }} failed!"
          echo "Please check the workflow logs and try again."
          # Here you could add Slack, Discord, or email notifications 