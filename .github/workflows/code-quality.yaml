name: Code Quality Analysis

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  schedule:
    # Run weekly quality analysis
    - cron: '0 8 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.13"

jobs:
  code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Run Ruff linting
        run: |
          uv run ruff check --output-format=github --exit-zero app/

      - name: Run Ruff formatting check
        run: |
          uv run ruff format --check app/

      - name: Run Bandit security analysis
        run: |
          uv run bandit -r app/ -f json -o bandit-results.json -x app/tests/ || true

      - name: Upload Bandit results to GitHub Security
        if: always()
        run: |
          if [ -f bandit-results.json ]; then
            # Convert Bandit JSON to SARIF format
            echo "Bandit analysis completed, results saved to bandit-results.json"
          fi

      - name: Run Semgrep security analysis
        run: |
          python -m pip install semgrep
          semgrep --config=auto --json --output=semgrep-results.json app/ || true

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-analysis-results
          path: |
            bandit-results.json
            semgrep-results.json

  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install analysis tools
        run: |
          pip install radon xenon mccabe

      - name: Run Radon complexity analysis
        run: |
          radon cc app/ --json > radon-complexity.json || true
          radon mi app/ --json > radon-maintainability.json || true
          radon raw app/ --json > radon-raw.json || true

      - name: Run Xenon complexity check
        run: |
          xenon --max-absolute B --max-modules A --max-average A app/ || true

      - name: Generate complexity report
        run: |
          echo "## Code Complexity Report" > complexity-report.md
          echo "Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> complexity-report.md
          echo "" >> complexity-report.md
          
          echo "### Cyclomatic Complexity" >> complexity-report.md
          if [ -f radon-complexity.json ]; then
            echo "```json" >> complexity-report.md
            cat radon-complexity.json >> complexity-report.md
            echo "```" >> complexity-report.md
          fi
          
          echo "" >> complexity-report.md
          echo "### Maintainability Index" >> complexity-report.md
          if [ -f radon-maintainability.json ]; then
            echo "```json" >> complexity-report.md
            cat radon-maintainability.json >> complexity-report.md
            echo "```" >> complexity-report.md
          fi

      - name: Upload complexity analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: complexity-analysis
          path: |
            complexity-report.md
            radon-*.json

  type-checking:
    name: Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies with type checking tools
        run: |
          uv sync --dev --frozen
          uv add mypy --dev

      - name: Run MyPy type checking
        run: |
          uv run mypy app/ --ignore-missing-imports --show-error-codes --pretty --json-report mypy-report/ || true

      - name: Upload type checking results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: type-checking-results
          path: mypy-report/

  documentation-check:
    name: Documentation Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation tools
        run: |
          pip install pydocstyle darglint interrogate

      - name: Check docstring style
        run: |
          pydocstyle app/ --convention=google --add-ignore=D100,D104 || true

      - name: Check docstring arguments
        run: |
          darglint app/ || true

      - name: Check documentation coverage
        run: |
          interrogate app/ --generate-badge interrogate_badge.svg -v || true

      - name: Upload documentation analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: documentation-analysis
          path: interrogate_badge.svg

  performance-profiling:
    name: Performance Profiling
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies and profiling tools
        run: |
          uv sync --dev --frozen
          uv add memory-profiler --dev

      - name: Create required directories
        run: |
          mkdir -p configs templates

      - name: Run memory profiling
        env:
          SECRET_KEY: test-secret-key-for-profiling
        run: |
          echo "import time; time.sleep(1)" > profile_test.py
          uv run python -m memory_profiler profile_test.py || true

      - name: Performance baseline check
        run: |
          echo "## Performance Baseline Report" > performance-report.md
          echo "Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> performance-report.md
          echo "" >> performance-report.md
          echo "### System Information" >> performance-report.md
          echo "- Python Version: ${{ env.PYTHON_VERSION }}" >> performance-report.md
          echo "- OS: Ubuntu Latest" >> performance-report.md
          echo "- CPU: $(nproc) cores" >> performance-report.md
          echo "- Memory: $(free -h | awk 'NR==2{print $2}')" >> performance-report.md

      - name: Upload performance analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-analysis
          path: performance-report.md

  generate-report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs: [code-analysis, complexity-analysis, type-checking, documentation-check]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate comprehensive report
        run: |
          echo "# Code Quality Report" > quality-report.md
          echo "Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> quality-report.md
          echo "Commit: ${{ github.sha }}" >> quality-report.md
          echo "Branch: ${{ github.ref_name }}" >> quality-report.md
          echo "" >> quality-report.md
          
          echo "## Summary" >> quality-report.md
          echo "| Check | Status |" >> quality-report.md
          echo "|-------|--------|" >> quality-report.md
          echo "| Static Analysis | ${{ needs.code-analysis.result }} |" >> quality-report.md
          echo "| Complexity Analysis | ${{ needs.complexity-analysis.result }} |" >> quality-report.md
          echo "| Type Checking | ${{ needs.type-checking.result }} |" >> quality-report.md
          echo "| Documentation | ${{ needs.documentation-check.result }} |" >> quality-report.md
          echo "" >> quality-report.md
          
          echo "## Detailed Results" >> quality-report.md
          echo "Detailed analysis results are available in the artifacts of this workflow run." >> quality-report.md

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-quality-report
          path: quality-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîç Code Quality Analysis Results\n\n${report}`
            }); 