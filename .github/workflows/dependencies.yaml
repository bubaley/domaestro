name: Dependencies Management

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'minor'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
          - 'all'

concurrency:
  group: dependencies-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Run pip-audit for security vulnerabilities
        run: |
          uv run pip install pip-audit
          uv run pip-audit --format=json --output=audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-report
          path: audit-report.json

      - name: Check for critical vulnerabilities
        run: |
          if [ -f audit-report.json ]; then
            CRITICAL_COUNT=$(jq '[.vulnerabilities[] | select(.aliases[] | contains("CRITICAL"))] | length' audit-report.json 2>/dev/null || echo "0")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "Found $CRITICAL_COUNT critical vulnerabilities!"
              echo "Please review the audit report and update dependencies immediately."
              exit 1
            fi
          fi

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: [dependency-audit]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create backup of lock file
        run: |
          cp uv.lock uv.lock.backup

      - name: Update dependencies based on input
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"
          
          case $UPDATE_TYPE in
            "patch")
              echo "Updating patch versions only"
              uv sync --upgrade-package "*" --no-dev
              ;;
            "minor")
              echo "Updating minor and patch versions"
              uv sync --upgrade-package "*" --no-dev
              ;;
            "major")
              echo "Updating all versions including major"
              uv sync --upgrade-package "*" --no-dev
              ;;
            "all")
              echo "Updating all dependencies including dev"
              uv sync --upgrade-package "*"
              ;;
          esac

      - name: Install updated dependencies
        run: |
          uv sync --dev

      - name: Run tests with updated dependencies
        env:
          SECRET_KEY: test-secret-key-for-dependency-update
        run: |
          mkdir -p configs templates
          uv run python -m pytest --tb=short || {
            echo "Tests failed with updated dependencies, reverting..."
            cp uv.lock.backup uv.lock
            uv sync --dev
            exit 1
          }

      - name: Run security check on updated dependencies
        run: |
          uv run pip install pip-audit
          uv run pip-audit --format=json --output=updated-audit-report.json || true
          
          if [ -f updated-audit-report.json ]; then
            CRITICAL_COUNT=$(jq '[.vulnerabilities[] | select(.aliases[] | contains("CRITICAL"))] | length' updated-audit-report.json 2>/dev/null || echo "0")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "Updated dependencies introduce critical vulnerabilities, reverting..."
              cp uv.lock.backup uv.lock
              uv sync --dev
              exit 1
            fi
          fi

      - name: Check for changes
        id: changes
        run: |
          if ! diff -q uv.lock uv.lock.backup > /dev/null 2>&1; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Dependencies were updated"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No dependency updates available"
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies (${{ github.event.inputs.update_type || 'minor' }})"
          title: "ðŸ”„ Automatic Dependency Update (${{ github.event.inputs.update_type || 'minor' }})"
          body: |
            ## ðŸ”„ Automatic Dependency Update
            
            This PR contains automatic dependency updates.
            
            **Update Type:** ${{ github.event.inputs.update_type || 'minor' }}
            **Triggered by:** ${{ github.event_name }}
            **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            ### Changes
            - Dependencies have been updated according to the specified update type
            - All tests passed with the new dependencies
            - Security audit completed successfully
            
            ### Review Checklist
            - [ ] Review dependency changes in `uv.lock`
            - [ ] Ensure all CI checks pass
            - [ ] Test the application locally if needed
            - [ ] Check for any breaking changes in updated packages
            
            **Note:** This PR was automatically created by the Dependencies Management workflow.
          branch: chore/dependency-update-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            ${{ github.event.inputs.update_type || 'minor' }}

  check-outdated:
    name: Check for Outdated Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Check for outdated dependencies
        run: |
          uv sync --dev --frozen
          
          echo "## Outdated Dependencies Report" > outdated-report.md
          echo "Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> outdated-report.md
          echo "" >> outdated-report.md
          
          # This is a placeholder - uv doesn't have a direct outdated command like pip
          # But we can check what would be updated
          echo "### Potential Updates Available" >> outdated-report.md
          uv lock --upgrade-package "*" --dry-run 2>&1 | grep -E "(Resolved|Updated)" >> outdated-report.md || echo "No updates available" >> outdated-report.md

      - name: Upload outdated report
        uses: actions/upload-artifact@v4
        with:
          name: outdated-dependencies-report
          path: outdated-report.md

  validate-lockfile:
    name: Validate Lock File
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Validate lock file is up to date
        run: |
          # Check if the lock file is consistent with pyproject.toml
          uv lock --check

      - name: Verify reproducible builds
        run: |
          # Install dependencies and verify they match the lock file exactly
          uv sync --dev --frozen 