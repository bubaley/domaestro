name: Docker Build & Publish

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  metadata:
    name: Extract Metadata
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      version: ${{ steps.meta.outputs.version }}
      
    steps:
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/domaestro
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Domaestro
            org.opencontainers.image.description=FastAPI application for domain management
            org.opencontainers.image.vendor=${{ github.repository_owner }}

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [metadata]
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      github.event_name == 'pull_request'
    permissions:
      contents: read
      packages: write
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && secrets.DOCKER_HUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ needs.metadata.outputs.tags }}
          labels: ${{ needs.metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max
          sbom: true

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.metadata.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [metadata, build-and-push]
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.metadata.outputs.version }}
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v6
        id: grype
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.metadata.outputs.version }}
          fail-build: false
          severity-cutoff: critical

      - name: Upload Grype scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: grype-report
          path: ${{ steps.grype.outputs.sarif }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [metadata, build-and-push, security-scan]
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      success()
    environment:
      name: staging
      url: https://staging.domaestro.example.com
      
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.metadata.outputs.version }} to staging"
          # Here you would add your actual deployment commands
          # For example: kubectl, helm, docker-compose, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [metadata, build-and-push, security-scan]
    if: |
      startsWith(github.ref, 'refs/tags/v') && 
      success()
    environment:
      name: production
      url: https://domaestro.example.com
      
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.metadata.outputs.version }} to production"
          # Here you would add your actual deployment commands
          # For example: kubectl, helm, docker-compose, etc.

  notify:
    name: Notify on Success/Failure
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always() && (needs.build-and-push.result == 'failure' || needs.security-scan.result == 'failure')
    
    steps:
      - name: Notify on failure
        run: |
          echo "Docker build or security scan failed"
          # Here you could add Slack, Discord, or email notifications 